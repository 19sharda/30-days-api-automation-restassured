ðŸš€ Day 15: Chaining Requests

1. What are we doing today?  
Weâ€™ll learn how to chain multiple API requests to perform a series of actions in a sequence. This is useful when one request depends on the result of a previous request.

ðŸ’¡Example: Imagine buying a product online: first, you add the item to your cart (POST), then you check the cart (GET), and finally, you proceed to checkout (PUT).

---

2. Code for Implementation

java
public class ChainReq {
    public static void main(String[] args) {
        baseURI = "https://jsonplaceholder.typicode.com";
        // Step 1: Create a new resource and extract its ID
        int postId = given()
                .header("Content-Type", "application/json")
                .body("{\"title\":\"foo\",\"body\":\"bar\",\"userId\":1}")
                .when()
                .post("/posts")
                .then()
                .log().all()
                .statusCode(201)
                .extract().path("id");

// Step 2: Use the extracted ID in a GET request
        given()
                .pathParam("id", postId)
                .when()
                .get("/posts/{id}")
                .then()
                .log().all()
                .statusCode(200)
                .body("title", equalTo("foo"));

    }
}


---

3. Practice Questions  
1. Chain a POST request to create a new resource, then use the created ID in a subsequent GET request.  
2. Try chaining PUT requests to update multiple resources in sequence.  
3. Test the sequence by deleting a resource at the end.
GIT: https://github.com/19sharda/30-days-api-automation-restassured/blob/main/src/test/java/tests/ChainReq.java
---

4. Whatâ€™s Next?  
Tomorrow, weâ€™ll use filters to enhance our debugging process and log request/response data.
