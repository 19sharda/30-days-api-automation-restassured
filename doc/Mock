Day 19: Mocking APIs with WireMock  

Today, we explore mocking APIs using WireMock—a robust tool for simulating API responses. This is invaluable when APIs are unavailable, under development, or when specific scenarios need testing.  

---  

 What is WireMock?  
WireMock is a flexible library for mocking HTTP APIs, enabling you to create a mock server to replicate real API behavior by defining custom responses.  

---  

 1. Setting Up WireMock  

# Steps:  
1. Add Dependency  
   Include the WireMock dependency in your project:  
   ```xml
   <dependency>
       <groupId>com.github.tomakehurst</groupId>
       <artifactId>wiremock</artifactId>
       <version>2.35.0</version>
   </dependency>
   ```  

2. Start Server  
   Use Java code to launch the WireMock server.  

---  

 2. Mocking API Responses  

# Steps:  
1. Stub Mapping  
   Configure WireMock to return predefined responses for specific requests.  

2. Run Test  
   Replace real API URLs with the mock server’s URL.  

---  

 Code Example  

```java
import com.github.tomakehurst.wiremock.WireMockServer;
import static com.github.tomakehurst.wiremock.client.WireMock.*;

public class MockingAPIs {
    public static void main(String[] args) {
        WireMockServer wireMockServer = new WireMockServer(8080);
        wireMockServer.start();

        wireMockServer.stubFor(get(urlEqualTo("/books"))
            .willReturn(aResponse()
                .withHeader("Content-Type", "application/json")
                .withBody("[{\"id\": 1, \"title\": \"Mocked Book\"}]")
                .withStatus(200)));

        wireMockServer.stubFor(post(urlEqualTo("/add-book"))
            .willReturn(aResponse()
                .withStatus(201)
                .withBody("{\"message\": \"Book added successfully!\"}")));

        System.out.println("Server running on port 8080.");
        Runtime.getRuntime().addShutdownHook(new Thread(wireMockServer::stop));
    }
}
```  

---  

 3. Validating Responses  

# GET Request:  
```java
Response getResponse = RestAssured.given()
    .baseUri("http://localhost:8080")
    .get("/books");
System.out.println("GET Response: " + getResponse.asPrettyString());
```  

# POST Request:  
```java
String newBook = "{ \"title\": \"Learning WireMock\" }";
Response postResponse = RestAssured.given()
    .baseUri("http://localhost:8080")
    .header("Content-Type", "application/json")
    .body(newBook)
    .post("/add-book");
System.out.println("POST Response: " + postResponse.asPrettyString());
```  

---  

 Key Features of WireMock  
- Stubbing: Define request-response pairs for mock APIs.  
- Simulating Errors: Test API failures like 500 errors.  
- Request Verification: Check interactions with APIs.  

---  

 Summary  
WireMock simplifies testing by simulating APIs, ensuring reliable and flexible environments. Mastering this tool enhances your automation's robustness by efficiently handling various scenarios.